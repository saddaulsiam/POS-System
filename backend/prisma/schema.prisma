generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  entity    String?
  entityId  Int?
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      Employee @relation(fields: [userId], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Supplier {
  id            Int             @id @default(autoincrement())
  name          String
  contactName   String?
  phone         String?
  email         String?         @unique
  address       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  products      Product[]
  PurchaseOrder PurchaseOrder[]
}

model Product {
  id                Int                 @id @default(autoincrement())
  name              String
  sku               String              @unique
  barcode           String?             @unique
  description       String?
  categoryId        Int
  supplierId        Int?
  purchasePrice     Float
  sellingPrice      Float
  stockQuantity     Float               @default(0)
  lowStockThreshold Int                 @default(10)
  isWeighted        Boolean             @default(false)
  isActive          Boolean             @default(true)
  taxRate           Float               @default(0)
  image             String?
  unit              String?             @default("pcs")
  hasVariants       Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  expiryDate        DateTime?
  lastSoldDate      DateTime?
  supplier          Supplier?           @relation(fields: [supplierId], references: [id])
  category          Category            @relation(fields: [categoryId], references: [id])
  variants          ProductVariant[]
  PurchaseOrderItem PurchaseOrderItem[]
  quickSaleItems    QuickSaleItem[]
  saleItems         SaleItem[]
  stockAlerts       StockAlert[]
  stockMovements    StockMovement[]
  notifications     Notification[]
}

model ProductVariant {
  id             Int             @id @default(autoincrement())
  productId      Int
  name           String
  sku            String          @unique
  barcode        String?         @unique
  purchasePrice  Float
  sellingPrice   Float
  stockQuantity  Float           @default(0)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  saleItems      SaleItem[]
  stockMovements StockMovement[]
}

model Customer {
  id                 Int                 @id @default(autoincrement())
  name               String
  phoneNumber        String?             @unique
  email              String?             @unique
  loyaltyPoints      Int                 @default(0)
  loyaltyTier        String              @default("BRONZE")
  dateOfBirth        DateTime?
  address            String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  loyaltyRewards     LoyaltyReward[]
  parkedSales        ParkedSale[]
  pointsTransactions PointsTransaction[]
  sales              Sale[]
}

model PointsTransaction {
  id          Int      @id @default(autoincrement())
  customerId  Int
  saleId      Int?
  type        String
  points      Int
  description String?
  createdAt   DateTime @default(now())
  sale        Sale?    @relation(fields: [saleId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model LoyaltyReward {
  id          Int       @id @default(autoincrement())
  customerId  Int
  rewardType  String
  rewardValue Float
  pointsCost  Int
  description String
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  redeemedAt  DateTime?
  createdAt   DateTime  @default(now())
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model LoyaltyOffer {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  offerType       String
  discountValue   Float?
  minimumPurchase Float    @default(0)
  requiredTier    String   @default("BRONZE")
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model LoyaltyTierConfig {
  id                 Int     @id @default(autoincrement())
  tier               String  @unique
  minimumPoints      Int     @default(0)
  pointsMultiplier   Float   @default(1.0)
  discountPercentage Float   @default(0)
  birthdayBonus      Int     @default(0)
  description        String?
}

model Employee {
  id          Int           @id @default(autoincrement())
  name        String
  username    String        @unique
  email       String?       @unique
  pinCode     String
  role        String        @default("CASHIER")
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  auditLogs   AuditLog[]
  CashDrawer  CashDrawer[]
  posSettings POSSettings[]
  parkedSales ParkedSale[]
  sales       Sale[]
}

model Sale {
  id                 Int                 @id @default(autoincrement())
  receiptId          String              @unique
  employeeId         Int
  customerId         Int?
  subtotal           Float
  taxAmount          Float               @default(0)
  discountAmount     Float               @default(0)
  finalAmount        Float
  paymentMethod      String
  paymentStatus      String              @default("COMPLETED")
  cashReceived       Float?
  changeGiven        Float?
  notes              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  discountReason     String?
  pointsEarned       Int                 @default(0)
  paymentSplits      PaymentSplit[]
  pointsTransactions PointsTransaction[]
  customer           Customer?           @relation(fields: [customerId], references: [id])
  employee           Employee            @relation(fields: [employeeId], references: [id])
  saleItems          SaleItem[]
}

model PaymentSplit {
  id            Int      @id @default(autoincrement())
  saleId        Int
  paymentMethod String
  amount        Float
  createdAt     DateTime @default(now())
  sale          Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model ParkedSale {
  id             Int       @id @default(autoincrement())
  employeeId     Int
  customerId     Int?
  items          String
  subtotal       Float
  taxAmount      Float     @default(0)
  discountAmount Float     @default(0)
  notes          String?
  parkedAt       DateTime  @default(now())
  expiresAt      DateTime?
  customer       Customer? @relation(fields: [customerId], references: [id])
  employee       Employee  @relation(fields: [employeeId], references: [id])
}

model QuickSaleItem {
  id          Int     @id @default(autoincrement())
  productId   Int
  displayName String
  color       String  @default("#3B82F6")
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model SaleItem {
  id               Int             @id @default(autoincrement())
  saleId           Int
  productId        Int
  productVariantId Int?
  quantity         Float
  priceAtSale      Float
  discount         Float           @default(0)
  subtotal         Float
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])
  sale             Sale            @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model StockMovement {
  id               Int             @id @default(autoincrement())
  productId        Int
  productVariantId Int?
  movementType     String
  quantity         Float
  reason           String?
  reference        String?
  createdBy        Int?
  createdAt        DateTime        @default(now())
  fromLocation     String?
  toLocation       String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])
}

model StockAlert {
  id         Int       @id @default(autoincrement())
  productId  Int
  alertType  String
  message    String
  isResolved Boolean   @default(false)
  resolvedAt DateTime?
  resolvedBy Int?
  createdAt  DateTime  @default(now())
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model PurchaseOrder {
  id           Int                 @id @default(autoincrement())
  poNumber     String              @unique
  supplierId   Int
  status       String              @default("PENDING")
  orderDate    DateTime            @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  totalAmount  Float               @default(0)
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  supplier     Supplier            @relation(fields: [supplierId], references: [id])
  items        PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id               Int           @id @default(autoincrement())
  purchaseOrderId  Int
  productId        Int
  quantity         Float
  unitCost         Float
  totalCost        Float
  receivedQuantity Float         @default(0)
  product          Product       @relation(fields: [productId], references: [id])
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
}

model CashDrawer {
  id              Int       @id @default(autoincrement())
  employeeId      Int
  openingBalance  Float
  closingBalance  Float?
  expectedBalance Float?
  difference      Float?
  status          String    @default("OPEN")
  openedAt        DateTime  @default(now())
  closedAt        DateTime?
  employee        Employee  @relation(fields: [employeeId], references: [id])
}

model POSSettings {
  systemErrorAlertEnabled         Boolean   @default(false)
  priceChangeAlertEnabled         Boolean   @default(false)
  id                              Int       @id @default(autoincrement())
  enableQuickSale                 Boolean   @default(true)
  enableSplitPayment              Boolean   @default(true)
  enableParkSale                  Boolean   @default(true)
  enableCustomerSearch            Boolean   @default(true)
  enableBarcodeScanner            Boolean   @default(true)
  enableLoyaltyPoints             Boolean   @default(true)
  loyaltyPointsPerUnit            Float     @default(10)
  pointsRedemptionRate            Float     @default(100)
  storeName                       String    @default("POS System")
  storeAddress                    String    @default("123 Main St, City, Country")
  storePhone                      String    @default("(123) 456-7890")
  storeEmail                      String?   @unique
  taxId                           String?
  taxRate                         Float     @default(0)
  currencyCode                    String    @default("USD")
  currencySymbol                  String    @default("$")
  currencyPosition                String    @default("before")
  receiptFooterText               String?
  returnPolicy                    String?
  printReceiptAuto                Boolean   @default(false)
  autoPrintThermal                Boolean   @default(true)
  enableLowStockAlerts            Boolean   @default(true)
  lowStockThreshold               Int       @default(10)
  enableHighStockAlerts           Boolean   @default(false)
  highStockThreshold              Int       @default(1000)
  enableProductExpiryAlerts       Boolean   @default(false)
  productExpiryDays               Int       @default(7)
  supplierDeliveryAlertEnabled    Boolean   @default(false)
  expectedDeliveryDays            Int       @default(7)
  inactiveProductAlertEnabled     Boolean   @default(false)
  inactiveProductDays             Int       @default(30)
  lowBalanceAlertEnabled          Boolean   @default(false)
  lowBalanceThreshold             Float     @default(100)
  frequentRefundsAlertEnabled     Boolean   @default(false)
  frequentRefundsThreshold        Int       @default(3)
  autoLogoutMinutes               Int       @default(30)
  requirePasswordOnVoid           Boolean   @default(true)
  enableAuditLog                  Boolean   @default(true)
  productsPerPage                 Int       @default(20)
  defaultView                     String    @default("grid")
  showProductImages               Boolean   @default(true)
  dailySalesTargetAlertEnabled    Boolean   @default(false)
  dailySalesTargetAmount          Int       @default(1000)
  loyaltyPointsExpiryAlertEnabled Boolean   @default(false)
  loyaltyPointsExpiryDays         Int       @default(30)
  updatedAt                       DateTime  @updatedAt
  updatedBy                       Int?
  updatedByEmployee               Employee? @relation(fields: [updatedBy], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String // e.g., 'expiry', 'inactive', etc.
  message   String
  productId Int?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product? @relation(fields: [productId], references: [id])
}
