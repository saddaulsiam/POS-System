model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  entity    String?
  entityId  Int?
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user Employee @relation(fields: [userId], references: [id])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Supplier {
  id            Int             @id @default(autoincrement())
  name          String
  contactName   String?
  phone         String?
  email         String?
  address       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  products      Product[]
  PurchaseOrder PurchaseOrder[]
}

model Product {
  id                Int      @id @default(autoincrement())
  name              String
  sku               String   @unique
  barcode           String?  @unique
  description       String?
  categoryId        Int
  supplierId        Int?
  purchasePrice     Float
  sellingPrice      Float
  stockQuantity     Float    @default(0)
  lowStockThreshold Int      @default(10)
  isWeighted        Boolean  @default(false)
  isActive          Boolean  @default(true)
  taxRate           Float    @default(0)
  image             String?
  unit              String?  @default("pcs") // pcs, kg, ltr, box, etc.
  hasVariants       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  category          Category            @relation(fields: [categoryId], references: [id])
  supplier          Supplier?           @relation(fields: [supplierId], references: [id])
  saleItems         SaleItem[]
  stockMovements    StockMovement[]
  PurchaseOrderItem PurchaseOrderItem[]
  variants          ProductVariant[]
  quickSaleItems    QuickSaleItem[]
  stockAlerts       StockAlert[]
}

model ProductVariant {
  id            Int      @id @default(autoincrement())
  productId     Int
  name          String // e.g., "500ml", "1L", "Small", "Medium"
  sku           String   @unique
  barcode       String?  @unique
  purchasePrice Float
  sellingPrice  Float
  stockQuantity Float    @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  saleItems      SaleItem[]
  stockMovements StockMovement[]
}

model Customer {
  id            Int       @id @default(autoincrement())
  name          String
  phoneNumber   String?   @unique
  email         String?   @unique
  loyaltyPoints Int       @default(0)
  loyaltyTier   String    @default("BRONZE") // BRONZE, SILVER, GOLD, PLATINUM
  dateOfBirth   DateTime?
  address       String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sales              Sale[]
  parkedSales        ParkedSale[]
  pointsTransactions PointsTransaction[]
  loyaltyRewards     LoyaltyReward[]
}

model PointsTransaction {
  id          Int      @id @default(autoincrement())
  customerId  Int
  saleId      Int?
  type        String // EARNED, REDEEMED, EXPIRED, ADJUSTED, BIRTHDAY_BONUS
  points      Int // Positive for earned, negative for redeemed
  description String?
  createdAt   DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sale     Sale?    @relation(fields: [saleId], references: [id])
}

model LoyaltyReward {
  id          Int       @id @default(autoincrement())
  customerId  Int
  rewardType  String // DISCOUNT_PERCENTAGE, DISCOUNT_FIXED, FREE_PRODUCT, POINTS_MULTIPLIER, BIRTHDAY_BONUS
  rewardValue Float // Percentage, fixed amount, or product ID
  pointsCost  Int // Points required to redeem
  description String
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  redeemedAt  DateTime?
  createdAt   DateTime  @default(now())

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model LoyaltyOffer {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  offerType       String // DISCOUNT_PERCENTAGE, DISCOUNT_FIXED, BUY_X_GET_Y, POINTS_MULTIPLIER
  discountValue   Float?
  minimumPurchase Float    @default(0)
  requiredTier    String   @default("BRONZE") // BRONZE, SILVER, GOLD, PLATINUM
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model LoyaltyTierConfig {
  id                 Int     @id @default(autoincrement())
  tier               String  @unique // BRONZE, SILVER, GOLD, PLATINUM
  minimumPoints      Int     @default(0)
  pointsMultiplier   Float   @default(1.0) // 1.0 = 1x, 1.5 = 1.5x points
  discountPercentage Float   @default(0) // % discount on all purchases
  birthdayBonus      Int     @default(0) // Bonus points on birthday
  description        String?
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  pinCode   String // Hashed PIN for POS login
  role      String   @default("CASHIER") // ADMIN, MANAGER, CASHIER, STAFF
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sales       Sale[]
  CashDrawer  CashDrawer[]
  auditLogs   AuditLog[]
  parkedSales ParkedSale[]
  posSettings POSSettings[]
}

model Sale {
  id             Int      @id @default(autoincrement())
  receiptId      String   @unique
  employeeId     Int
  customerId     Int?
  subtotal       Float
  taxAmount      Float    @default(0)
  discountAmount Float    @default(0)
  discountReason String? // Reason for discount
  finalAmount    Float
  paymentMethod  String // CASH, CARD, MOBILE_PAYMENT, STORE_CREDIT, MIXED
  paymentStatus  String   @default("COMPLETED") // PENDING, COMPLETED, FAILED, REFUNDED, PARKED
  cashReceived   Float?
  changeGiven    Float?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  employee           Employee            @relation(fields: [employeeId], references: [id])
  customer           Customer?           @relation(fields: [customerId], references: [id])
  saleItems          SaleItem[]
  paymentSplits      PaymentSplit[] // For MIXED payment method
  pointsTransactions PointsTransaction[]
}

model PaymentSplit {
  id            Int      @id @default(autoincrement())
  saleId        Int
  paymentMethod String // CASH, CARD, MOBILE_PAYMENT, STORE_CREDIT
  amount        Float
  createdAt     DateTime @default(now())

  sale Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model ParkedSale {
  id             Int       @id @default(autoincrement())
  employeeId     Int
  customerId     Int?
  items          String // JSON string of cart items
  subtotal       Float
  taxAmount      Float     @default(0)
  discountAmount Float     @default(0)
  notes          String?
  parkedAt       DateTime  @default(now())
  expiresAt      DateTime? // Optional expiry

  employee Employee  @relation(fields: [employeeId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
}

model QuickSaleItem {
  id          Int     @id @default(autoincrement())
  productId   Int
  displayName String // Custom display name (e.g., "Coffee", "Water")
  color       String  @default("#3B82F6") // Hex color for button
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model SaleItem {
  id               Int   @id @default(autoincrement())
  saleId           Int
  productId        Int
  productVariantId Int? // Optional: if product has variants
  quantity         Float // Decimal for weighted items
  priceAtSale      Float // Store price at time of sale
  discount         Float @default(0)
  subtotal         Float

  sale           Sale            @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
}

model StockMovement {
  id               Int      @id @default(autoincrement())
  productId        Int
  productVariantId Int? // Optional: if product has variants
  movementType     String // SALE, PURCHASE, ADJUSTMENT, RETURN, DAMAGED, EXPIRED, TRANSFER
  quantity         Float
  reason           String?
  reference        String? // PO number, sale ID, transfer ID, etc.
  fromLocation     String? // For transfers
  toLocation       String? // For transfers
  createdBy        Int? // Employee ID
  createdAt        DateTime @default(now())

  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
}

model StockAlert {
  id         Int       @id @default(autoincrement())
  productId  Int
  alertType  String // LOW_STOCK, OUT_OF_STOCK, EXPIRING_SOON, DAMAGED
  message    String
  isResolved Boolean   @default(false)
  resolvedAt DateTime?
  resolvedBy Int? // Employee ID
  createdAt  DateTime  @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model PurchaseOrder {
  id           Int       @id @default(autoincrement())
  poNumber     String    @unique
  supplierId   Int
  status       String    @default("PENDING") // PENDING, ORDERED, PARTIALLY_RECEIVED, RECEIVED, CANCELLED
  orderDate    DateTime  @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  totalAmount  Float     @default(0)
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  supplier Supplier            @relation(fields: [supplierId], references: [id])
  items    PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id               Int   @id @default(autoincrement())
  purchaseOrderId  Int
  productId        Int
  quantity         Float
  unitCost         Float
  totalCost        Float
  receivedQuantity Float @default(0)

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])
}

model CashDrawer {
  id              Int       @id @default(autoincrement())
  employeeId      Int
  openingBalance  Float
  closingBalance  Float?
  expectedBalance Float?
  difference      Float?
  status          String    @default("OPEN") // OPEN, CLOSED
  openedAt        DateTime  @default(now())
  closedAt        DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

model SystemSetting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model POSSettings {
  id                   Int      @id @default(autoincrement())
  enableQuickSale      Boolean  @default(true)
  enableSplitPayment   Boolean  @default(true)
  enableParkSale       Boolean  @default(true)
  enableCustomerSearch Boolean  @default(true)
  enableBarcodeScanner Boolean  @default(true)
  enableLoyaltyPoints  Boolean  @default(true)
  taxRate              Float    @default(0)
  receiptFooterText    String?
  updatedAt            DateTime @updatedAt
  updatedBy            Int?

  updatedByEmployee Employee? @relation(fields: [updatedBy], references: [id])
}
